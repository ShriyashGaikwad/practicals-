#include <iostream>
using namespace std;

// Node class represents each word and its meaning in the AVL Tree
class Node {
public:
    string word, meaning;
    Node* left;      // Left child
    Node* right;     // Right child
    int height;      // Height of the node (for balancing)

    Node(string w, string m) {
        word = w;
        meaning = m;
        left = right = nullptr;
        height = 1;  // New node is initially at height 1
    }
};

// Function to get the height of a node
int height(Node* node) {
    return node ? node->height : 0;
}

// Function to get the balance factor of a node
int getBalance(Node* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

// Function to update the height of a node
void updateHeight(Node* node) {
    node->height = 1 + max(height(node->left), height(node->right));
}

// Right rotation for Left-Left case
Node* rotateRight(Node* y) {
    Node* x = y->left;
    y->left = x->right;
    x->right = y;

    updateHeight(y);  // Update height after rotation
    updateHeight(x);

    return x;  // New root after rotation
}

// Left rotation for Right-Right case
Node* rotateLeft(Node* x) {
    Node* y = x->right;
    x->right = y->left;
    y->left = x;

    updateHeight(x);
    updateHeight(y);

    return y;
}

// Recursive function to insert a new word into the AVL tree
Node* insert(Node* root, string word, string meaning) {
    // Step 1: Perform regular BST insertion
    if (!root) return new Node(word, meaning);

    if (word < root->word)
        root->left = insert(root->left, word, meaning);
    else if (word > root->word)
        root->right = insert(root->right, word, meaning);
    else
        return root; // Duplicate word, do not insert

    // Step 2: Update height of current node
    updateHeight(root);

    // Step 3: Check balance and perform rotations if needed
    int bf = getBalance(root);

    // Left-Left case
    if (bf > 1 && word < root->left->word)
        return rotateRight(root);

    // Right-Right case
    if (bf < -1 && word > root->right->word)
        return rotateLeft(root);

    // Left-Right case
    if (bf > 1 && word > root->left->word) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }

    // Right-Left case
    if (bf < -1 && word < root->right->word) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;  // Return balanced root
}

// In-order traversal to print dictionary in ascending order
void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->word << " : " << root->meaning << endl;
    inorder(root->right);
}

// Iterative search function for a word
void search(Node* root, string key) {
    while (root) {
        if (key == root->word) {
            cout << "Found: " << root->word << " = " << root->meaning << endl;
            return;
        }
        root = (key < root->word) ? root->left : root->right;
    }
    cout << "Word not found.\n";
}

// Main function to drive the menu
int main() {
    Node* root = nullptr;  // Root of AVL Tree
    int choice;
    string word, meaning;

    do {
        // Display menu
        cout << "\n1. Insert Word\n2. Display Dictionary (A-Z)\n3. Search Word\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter word: ";
                cin >> word;
                cout << "Enter meaning: ";
                cin >> meaning;
                root = insert(root, word, meaning);  // Insert word into AVL tree
                break;
            case 2:
                cout << "\nDictionary (Ascending Order):\n";
                inorder(root);  // Print dictionary
                break;
            case 3:
                cout << "Enter word to search: ";
                cin >> word;
                search(root, word);  // Search for word
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 4);

    return 0;
}
